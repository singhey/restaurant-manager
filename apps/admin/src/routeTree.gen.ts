/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RestaurantRouteImport } from './routes/restaurant'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RestaurantSelectorRouteImport } from './routes/restaurant/selector'
import { Route as RestaurantCreateRouteImport } from './routes/restaurant/create'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as RestaurantManageRestaurantIdRouteImport } from './routes/restaurant/manage/$restaurantId'
import { Route as RestaurantAccountMeRouteImport } from './routes/restaurant/account/me'
import { Route as RestaurantManageRestaurantIdIndexRouteImport } from './routes/restaurant/manage/$restaurantId/index'
import { Route as RestaurantManageRestaurantIdMenuRouteImport } from './routes/restaurant/manage/$restaurantId/menu'
import { Route as RestaurantManageRestaurantIdUsersCreateRouteImport } from './routes/restaurant/manage/$restaurantId/users/create'
import { Route as RestaurantManageRestaurantIdUsersActiveRouteImport } from './routes/restaurant/manage/$restaurantId/users/active'
import { Route as RestaurantManageRestaurantIdMenuEditRouteImport } from './routes/restaurant/manage/$restaurantId/menu/edit'

const RestaurantRoute = RestaurantRouteImport.update({
  id: '/restaurant',
  path: '/restaurant',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RestaurantSelectorRoute = RestaurantSelectorRouteImport.update({
  id: '/selector',
  path: '/selector',
  getParentRoute: () => RestaurantRoute,
} as any)
const RestaurantCreateRoute = RestaurantCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => RestaurantRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthRoute,
} as any)
const RestaurantManageRestaurantIdRoute =
  RestaurantManageRestaurantIdRouteImport.update({
    id: '/manage/$restaurantId',
    path: '/manage/$restaurantId',
    getParentRoute: () => RestaurantRoute,
  } as any)
const RestaurantAccountMeRoute = RestaurantAccountMeRouteImport.update({
  id: '/account/me',
  path: '/account/me',
  getParentRoute: () => RestaurantRoute,
} as any)
const RestaurantManageRestaurantIdIndexRoute =
  RestaurantManageRestaurantIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => RestaurantManageRestaurantIdRoute,
  } as any)
const RestaurantManageRestaurantIdMenuRoute =
  RestaurantManageRestaurantIdMenuRouteImport.update({
    id: '/menu',
    path: '/menu',
    getParentRoute: () => RestaurantManageRestaurantIdRoute,
  } as any)
const RestaurantManageRestaurantIdUsersCreateRoute =
  RestaurantManageRestaurantIdUsersCreateRouteImport.update({
    id: '/users/create',
    path: '/users/create',
    getParentRoute: () => RestaurantManageRestaurantIdRoute,
  } as any)
const RestaurantManageRestaurantIdUsersActiveRoute =
  RestaurantManageRestaurantIdUsersActiveRouteImport.update({
    id: '/users/active',
    path: '/users/active',
    getParentRoute: () => RestaurantManageRestaurantIdRoute,
  } as any)
const RestaurantManageRestaurantIdMenuEditRoute =
  RestaurantManageRestaurantIdMenuEditRouteImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => RestaurantManageRestaurantIdMenuRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/restaurant': typeof RestaurantRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/restaurant/create': typeof RestaurantCreateRoute
  '/restaurant/selector': typeof RestaurantSelectorRoute
  '/restaurant/account/me': typeof RestaurantAccountMeRoute
  '/restaurant/manage/$restaurantId': typeof RestaurantManageRestaurantIdRouteWithChildren
  '/restaurant/manage/$restaurantId/menu': typeof RestaurantManageRestaurantIdMenuRouteWithChildren
  '/restaurant/manage/$restaurantId/': typeof RestaurantManageRestaurantIdIndexRoute
  '/restaurant/manage/$restaurantId/menu/edit': typeof RestaurantManageRestaurantIdMenuEditRoute
  '/restaurant/manage/$restaurantId/users/active': typeof RestaurantManageRestaurantIdUsersActiveRoute
  '/restaurant/manage/$restaurantId/users/create': typeof RestaurantManageRestaurantIdUsersCreateRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/restaurant': typeof RestaurantRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/restaurant/create': typeof RestaurantCreateRoute
  '/restaurant/selector': typeof RestaurantSelectorRoute
  '/restaurant/account/me': typeof RestaurantAccountMeRoute
  '/restaurant/manage/$restaurantId/menu': typeof RestaurantManageRestaurantIdMenuRouteWithChildren
  '/restaurant/manage/$restaurantId': typeof RestaurantManageRestaurantIdIndexRoute
  '/restaurant/manage/$restaurantId/menu/edit': typeof RestaurantManageRestaurantIdMenuEditRoute
  '/restaurant/manage/$restaurantId/users/active': typeof RestaurantManageRestaurantIdUsersActiveRoute
  '/restaurant/manage/$restaurantId/users/create': typeof RestaurantManageRestaurantIdUsersCreateRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/restaurant': typeof RestaurantRouteWithChildren
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/restaurant/create': typeof RestaurantCreateRoute
  '/restaurant/selector': typeof RestaurantSelectorRoute
  '/restaurant/account/me': typeof RestaurantAccountMeRoute
  '/restaurant/manage/$restaurantId': typeof RestaurantManageRestaurantIdRouteWithChildren
  '/restaurant/manage/$restaurantId/menu': typeof RestaurantManageRestaurantIdMenuRouteWithChildren
  '/restaurant/manage/$restaurantId/': typeof RestaurantManageRestaurantIdIndexRoute
  '/restaurant/manage/$restaurantId/menu/edit': typeof RestaurantManageRestaurantIdMenuEditRoute
  '/restaurant/manage/$restaurantId/users/active': typeof RestaurantManageRestaurantIdUsersActiveRoute
  '/restaurant/manage/$restaurantId/users/create': typeof RestaurantManageRestaurantIdUsersCreateRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/restaurant'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/restaurant/create'
    | '/restaurant/selector'
    | '/restaurant/account/me'
    | '/restaurant/manage/$restaurantId'
    | '/restaurant/manage/$restaurantId/menu'
    | '/restaurant/manage/$restaurantId/'
    | '/restaurant/manage/$restaurantId/menu/edit'
    | '/restaurant/manage/$restaurantId/users/active'
    | '/restaurant/manage/$restaurantId/users/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/restaurant'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/restaurant/create'
    | '/restaurant/selector'
    | '/restaurant/account/me'
    | '/restaurant/manage/$restaurantId/menu'
    | '/restaurant/manage/$restaurantId'
    | '/restaurant/manage/$restaurantId/menu/edit'
    | '/restaurant/manage/$restaurantId/users/active'
    | '/restaurant/manage/$restaurantId/users/create'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/restaurant'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/restaurant/create'
    | '/restaurant/selector'
    | '/restaurant/account/me'
    | '/restaurant/manage/$restaurantId'
    | '/restaurant/manage/$restaurantId/menu'
    | '/restaurant/manage/$restaurantId/'
    | '/restaurant/manage/$restaurantId/menu/edit'
    | '/restaurant/manage/$restaurantId/users/active'
    | '/restaurant/manage/$restaurantId/users/create'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  RestaurantRoute: typeof RestaurantRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/restaurant': {
      id: '/restaurant'
      path: '/restaurant'
      fullPath: '/restaurant'
      preLoaderRoute: typeof RestaurantRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/restaurant/selector': {
      id: '/restaurant/selector'
      path: '/selector'
      fullPath: '/restaurant/selector'
      preLoaderRoute: typeof RestaurantSelectorRouteImport
      parentRoute: typeof RestaurantRoute
    }
    '/restaurant/create': {
      id: '/restaurant/create'
      path: '/create'
      fullPath: '/restaurant/create'
      preLoaderRoute: typeof RestaurantCreateRouteImport
      parentRoute: typeof RestaurantRoute
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthRoute
    }
    '/restaurant/manage/$restaurantId': {
      id: '/restaurant/manage/$restaurantId'
      path: '/manage/$restaurantId'
      fullPath: '/restaurant/manage/$restaurantId'
      preLoaderRoute: typeof RestaurantManageRestaurantIdRouteImport
      parentRoute: typeof RestaurantRoute
    }
    '/restaurant/account/me': {
      id: '/restaurant/account/me'
      path: '/account/me'
      fullPath: '/restaurant/account/me'
      preLoaderRoute: typeof RestaurantAccountMeRouteImport
      parentRoute: typeof RestaurantRoute
    }
    '/restaurant/manage/$restaurantId/': {
      id: '/restaurant/manage/$restaurantId/'
      path: '/'
      fullPath: '/restaurant/manage/$restaurantId/'
      preLoaderRoute: typeof RestaurantManageRestaurantIdIndexRouteImport
      parentRoute: typeof RestaurantManageRestaurantIdRoute
    }
    '/restaurant/manage/$restaurantId/menu': {
      id: '/restaurant/manage/$restaurantId/menu'
      path: '/menu'
      fullPath: '/restaurant/manage/$restaurantId/menu'
      preLoaderRoute: typeof RestaurantManageRestaurantIdMenuRouteImport
      parentRoute: typeof RestaurantManageRestaurantIdRoute
    }
    '/restaurant/manage/$restaurantId/users/create': {
      id: '/restaurant/manage/$restaurantId/users/create'
      path: '/users/create'
      fullPath: '/restaurant/manage/$restaurantId/users/create'
      preLoaderRoute: typeof RestaurantManageRestaurantIdUsersCreateRouteImport
      parentRoute: typeof RestaurantManageRestaurantIdRoute
    }
    '/restaurant/manage/$restaurantId/users/active': {
      id: '/restaurant/manage/$restaurantId/users/active'
      path: '/users/active'
      fullPath: '/restaurant/manage/$restaurantId/users/active'
      preLoaderRoute: typeof RestaurantManageRestaurantIdUsersActiveRouteImport
      parentRoute: typeof RestaurantManageRestaurantIdRoute
    }
    '/restaurant/manage/$restaurantId/menu/edit': {
      id: '/restaurant/manage/$restaurantId/menu/edit'
      path: '/edit'
      fullPath: '/restaurant/manage/$restaurantId/menu/edit'
      preLoaderRoute: typeof RestaurantManageRestaurantIdMenuEditRouteImport
      parentRoute: typeof RestaurantManageRestaurantIdMenuRoute
    }
  }
}

interface AuthRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface RestaurantManageRestaurantIdMenuRouteChildren {
  RestaurantManageRestaurantIdMenuEditRoute: typeof RestaurantManageRestaurantIdMenuEditRoute
}

const RestaurantManageRestaurantIdMenuRouteChildren: RestaurantManageRestaurantIdMenuRouteChildren =
  {
    RestaurantManageRestaurantIdMenuEditRoute:
      RestaurantManageRestaurantIdMenuEditRoute,
  }

const RestaurantManageRestaurantIdMenuRouteWithChildren =
  RestaurantManageRestaurantIdMenuRoute._addFileChildren(
    RestaurantManageRestaurantIdMenuRouteChildren,
  )

interface RestaurantManageRestaurantIdRouteChildren {
  RestaurantManageRestaurantIdMenuRoute: typeof RestaurantManageRestaurantIdMenuRouteWithChildren
  RestaurantManageRestaurantIdIndexRoute: typeof RestaurantManageRestaurantIdIndexRoute
  RestaurantManageRestaurantIdUsersActiveRoute: typeof RestaurantManageRestaurantIdUsersActiveRoute
  RestaurantManageRestaurantIdUsersCreateRoute: typeof RestaurantManageRestaurantIdUsersCreateRoute
}

const RestaurantManageRestaurantIdRouteChildren: RestaurantManageRestaurantIdRouteChildren =
  {
    RestaurantManageRestaurantIdMenuRoute:
      RestaurantManageRestaurantIdMenuRouteWithChildren,
    RestaurantManageRestaurantIdIndexRoute:
      RestaurantManageRestaurantIdIndexRoute,
    RestaurantManageRestaurantIdUsersActiveRoute:
      RestaurantManageRestaurantIdUsersActiveRoute,
    RestaurantManageRestaurantIdUsersCreateRoute:
      RestaurantManageRestaurantIdUsersCreateRoute,
  }

const RestaurantManageRestaurantIdRouteWithChildren =
  RestaurantManageRestaurantIdRoute._addFileChildren(
    RestaurantManageRestaurantIdRouteChildren,
  )

interface RestaurantRouteChildren {
  RestaurantCreateRoute: typeof RestaurantCreateRoute
  RestaurantSelectorRoute: typeof RestaurantSelectorRoute
  RestaurantAccountMeRoute: typeof RestaurantAccountMeRoute
  RestaurantManageRestaurantIdRoute: typeof RestaurantManageRestaurantIdRouteWithChildren
}

const RestaurantRouteChildren: RestaurantRouteChildren = {
  RestaurantCreateRoute: RestaurantCreateRoute,
  RestaurantSelectorRoute: RestaurantSelectorRoute,
  RestaurantAccountMeRoute: RestaurantAccountMeRoute,
  RestaurantManageRestaurantIdRoute:
    RestaurantManageRestaurantIdRouteWithChildren,
}

const RestaurantRouteWithChildren = RestaurantRoute._addFileChildren(
  RestaurantRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  RestaurantRoute: RestaurantRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
