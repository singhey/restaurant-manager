/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, OrderItemAddon } from "../../../../../restaurant-manager/generated/prisma";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateOrderItemAddon(options?: Omit<(UseMutationOptions<(OrderItemAddon | undefined), DefaultError, Prisma.OrderItemAddonCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderItemAddonCreateArgs, DefaultError, OrderItemAddon, true>('OrderItemAddon', 'POST', `${endpoint}/orderItemAddon/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderItemAddonCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderItemAddonCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderItemAddon, Prisma.OrderItemAddonGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderItemAddonCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderItemAddon, Prisma.OrderItemAddonGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyOrderItemAddon(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderItemAddonCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderItemAddonCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderItemAddon', 'POST', `${endpoint}/orderItemAddon/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderItemAddonCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderItemAddonCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderItemAddonCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyOrderItemAddon<TArgs extends Prisma.OrderItemAddonFindManyArgs, TQueryFnData = Array<Prisma.OrderItemAddonGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/findMany`, args, options, fetch);
}

export function useInfiniteFindManyOrderItemAddon<TArgs extends Prisma.OrderItemAddonFindManyArgs, TQueryFnData = Array<Prisma.OrderItemAddonGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/findMany`, args, options, fetch);
}

export function useSuspenseFindManyOrderItemAddon<TArgs extends Prisma.OrderItemAddonFindManyArgs, TQueryFnData = Array<Prisma.OrderItemAddonGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyOrderItemAddon<TArgs extends Prisma.OrderItemAddonFindManyArgs, TQueryFnData = Array<Prisma.OrderItemAddonGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/findMany`, args, options, fetch);
}

export function useFindUniqueOrderItemAddon<TArgs extends Prisma.OrderItemAddonFindUniqueArgs, TQueryFnData = Prisma.OrderItemAddonGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueOrderItemAddon<TArgs extends Prisma.OrderItemAddonFindUniqueArgs, TQueryFnData = Prisma.OrderItemAddonGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/findUnique`, args, options, fetch);
}

export function useFindFirstOrderItemAddon<TArgs extends Prisma.OrderItemAddonFindFirstArgs, TQueryFnData = Prisma.OrderItemAddonGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstOrderItemAddon<TArgs extends Prisma.OrderItemAddonFindFirstArgs, TQueryFnData = Prisma.OrderItemAddonGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/findFirst`, args, options, fetch);
}

export function useUpdateOrderItemAddon(options?: Omit<(UseMutationOptions<(OrderItemAddon | undefined), DefaultError, Prisma.OrderItemAddonUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderItemAddonUpdateArgs, DefaultError, OrderItemAddon, true>('OrderItemAddon', 'PUT', `${endpoint}/orderItemAddon/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderItemAddonUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderItemAddonUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderItemAddon, Prisma.OrderItemAddonGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderItemAddonUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderItemAddon, Prisma.OrderItemAddonGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyOrderItemAddon(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderItemAddonUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderItemAddonUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderItemAddon', 'PUT', `${endpoint}/orderItemAddon/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderItemAddonUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderItemAddonUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderItemAddonUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertOrderItemAddon(options?: Omit<(UseMutationOptions<(OrderItemAddon | undefined), DefaultError, Prisma.OrderItemAddonUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderItemAddonUpsertArgs, DefaultError, OrderItemAddon, true>('OrderItemAddon', 'POST', `${endpoint}/orderItemAddon/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderItemAddonUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderItemAddonUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderItemAddon, Prisma.OrderItemAddonGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderItemAddonUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderItemAddon, Prisma.OrderItemAddonGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteOrderItemAddon(options?: Omit<(UseMutationOptions<(OrderItemAddon | undefined), DefaultError, Prisma.OrderItemAddonDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderItemAddonDeleteArgs, DefaultError, OrderItemAddon, true>('OrderItemAddon', 'DELETE', `${endpoint}/orderItemAddon/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderItemAddonDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderItemAddonDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderItemAddon, Prisma.OrderItemAddonGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderItemAddonDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderItemAddon, Prisma.OrderItemAddonGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyOrderItemAddon(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderItemAddonDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderItemAddonDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderItemAddon', 'DELETE', `${endpoint}/orderItemAddon/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderItemAddonDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderItemAddonDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderItemAddonDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateOrderItemAddon<TArgs extends Prisma.OrderItemAddonAggregateArgs, TQueryFnData = Prisma.GetOrderItemAddonAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateOrderItemAddon<TArgs extends Prisma.OrderItemAddonAggregateArgs, TQueryFnData = Prisma.GetOrderItemAddonAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/aggregate`, args, options, fetch);
}

export function useGroupByOrderItemAddon<TArgs extends Prisma.OrderItemAddonGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OrderItemAddonGroupByArgs['orderBy'] } : { orderBy?: Prisma.OrderItemAddonGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OrderItemAddonGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.OrderItemAddonGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.OrderItemAddonGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.OrderItemAddonGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrderItemAddonGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByOrderItemAddon<TArgs extends Prisma.OrderItemAddonGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OrderItemAddonGroupByArgs['orderBy'] } : { orderBy?: Prisma.OrderItemAddonGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OrderItemAddonGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.OrderItemAddonGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.OrderItemAddonGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.OrderItemAddonGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrderItemAddonGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/groupBy`, args, options, fetch);
}

export function useCountOrderItemAddon<TArgs extends Prisma.OrderItemAddonCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OrderItemAddonCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/count`, args, options, fetch);
}

export function useSuspenseCountOrderItemAddon<TArgs extends Prisma.OrderItemAddonCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OrderItemAddonCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderItemAddonCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/count`, args, options, fetch);
}

export function useCheckOrderItemAddon<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; orderItemId?: string; addonId?: string; quantity?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('OrderItemAddon', `${endpoint}/orderItemAddon/check`, args, options, fetch);
}
