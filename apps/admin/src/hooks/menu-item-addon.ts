/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, MenuItemAddon } from "../../../../../restaurant-manager/generated/prisma";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateMenuItemAddon(options?: Omit<(UseMutationOptions<(MenuItemAddon | undefined), DefaultError, Prisma.MenuItemAddonCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MenuItemAddonCreateArgs, DefaultError, MenuItemAddon, true>('MenuItemAddon', 'POST', `${endpoint}/menuItemAddon/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MenuItemAddonCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MenuItemAddonCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MenuItemAddon, Prisma.MenuItemAddonGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MenuItemAddonCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MenuItemAddon, Prisma.MenuItemAddonGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyMenuItemAddon(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MenuItemAddonCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MenuItemAddonCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('MenuItemAddon', 'POST', `${endpoint}/menuItemAddon/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MenuItemAddonCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MenuItemAddonCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MenuItemAddonCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyMenuItemAddon<TArgs extends Prisma.MenuItemAddonFindManyArgs, TQueryFnData = Array<Prisma.MenuItemAddonGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/findMany`, args, options, fetch);
}

export function useInfiniteFindManyMenuItemAddon<TArgs extends Prisma.MenuItemAddonFindManyArgs, TQueryFnData = Array<Prisma.MenuItemAddonGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/findMany`, args, options, fetch);
}

export function useSuspenseFindManyMenuItemAddon<TArgs extends Prisma.MenuItemAddonFindManyArgs, TQueryFnData = Array<Prisma.MenuItemAddonGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyMenuItemAddon<TArgs extends Prisma.MenuItemAddonFindManyArgs, TQueryFnData = Array<Prisma.MenuItemAddonGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/findMany`, args, options, fetch);
}

export function useFindUniqueMenuItemAddon<TArgs extends Prisma.MenuItemAddonFindUniqueArgs, TQueryFnData = Prisma.MenuItemAddonGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueMenuItemAddon<TArgs extends Prisma.MenuItemAddonFindUniqueArgs, TQueryFnData = Prisma.MenuItemAddonGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/findUnique`, args, options, fetch);
}

export function useFindFirstMenuItemAddon<TArgs extends Prisma.MenuItemAddonFindFirstArgs, TQueryFnData = Prisma.MenuItemAddonGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstMenuItemAddon<TArgs extends Prisma.MenuItemAddonFindFirstArgs, TQueryFnData = Prisma.MenuItemAddonGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/findFirst`, args, options, fetch);
}

export function useUpdateMenuItemAddon(options?: Omit<(UseMutationOptions<(MenuItemAddon | undefined), DefaultError, Prisma.MenuItemAddonUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MenuItemAddonUpdateArgs, DefaultError, MenuItemAddon, true>('MenuItemAddon', 'PUT', `${endpoint}/menuItemAddon/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MenuItemAddonUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.MenuItemAddonUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MenuItemAddon, Prisma.MenuItemAddonGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MenuItemAddonUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MenuItemAddon, Prisma.MenuItemAddonGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyMenuItemAddon(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MenuItemAddonUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MenuItemAddonUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('MenuItemAddon', 'PUT', `${endpoint}/menuItemAddon/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MenuItemAddonUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MenuItemAddonUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MenuItemAddonUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertMenuItemAddon(options?: Omit<(UseMutationOptions<(MenuItemAddon | undefined), DefaultError, Prisma.MenuItemAddonUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MenuItemAddonUpsertArgs, DefaultError, MenuItemAddon, true>('MenuItemAddon', 'POST', `${endpoint}/menuItemAddon/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MenuItemAddonUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.MenuItemAddonUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MenuItemAddon, Prisma.MenuItemAddonGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MenuItemAddonUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MenuItemAddon, Prisma.MenuItemAddonGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteMenuItemAddon(options?: Omit<(UseMutationOptions<(MenuItemAddon | undefined), DefaultError, Prisma.MenuItemAddonDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MenuItemAddonDeleteArgs, DefaultError, MenuItemAddon, true>('MenuItemAddon', 'DELETE', `${endpoint}/menuItemAddon/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MenuItemAddonDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.MenuItemAddonDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, MenuItemAddon, Prisma.MenuItemAddonGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.MenuItemAddonDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, MenuItemAddon, Prisma.MenuItemAddonGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyMenuItemAddon(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.MenuItemAddonDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.MenuItemAddonDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('MenuItemAddon', 'DELETE', `${endpoint}/menuItemAddon/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.MenuItemAddonDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.MenuItemAddonDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.MenuItemAddonDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateMenuItemAddon<TArgs extends Prisma.MenuItemAddonAggregateArgs, TQueryFnData = Prisma.GetMenuItemAddonAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateMenuItemAddon<TArgs extends Prisma.MenuItemAddonAggregateArgs, TQueryFnData = Prisma.GetMenuItemAddonAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/aggregate`, args, options, fetch);
}

export function useGroupByMenuItemAddon<TArgs extends Prisma.MenuItemAddonGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MenuItemAddonGroupByArgs['orderBy'] } : { orderBy?: Prisma.MenuItemAddonGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MenuItemAddonGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.MenuItemAddonGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.MenuItemAddonGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.MenuItemAddonGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MenuItemAddonGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByMenuItemAddon<TArgs extends Prisma.MenuItemAddonGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.MenuItemAddonGroupByArgs['orderBy'] } : { orderBy?: Prisma.MenuItemAddonGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.MenuItemAddonGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.MenuItemAddonGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.MenuItemAddonGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.MenuItemAddonGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.MenuItemAddonGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/groupBy`, args, options, fetch);
}

export function useCountMenuItemAddon<TArgs extends Prisma.MenuItemAddonCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MenuItemAddonCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/count`, args, options, fetch);
}

export function useSuspenseCountMenuItemAddon<TArgs extends Prisma.MenuItemAddonCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.MenuItemAddonCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.MenuItemAddonCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/count`, args, options, fetch);
}

export function useCheckMenuItemAddon<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; menuItemId?: string; addonId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('MenuItemAddon', `${endpoint}/menuItemAddon/check`, args, options, fetch);
}
