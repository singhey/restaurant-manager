/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AddonGroup } from "../../../../../../restaurant-manager/generated/prisma";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAddonGroup(options?: Omit<(UseMutationOptions<(AddonGroup | undefined), DefaultError, Prisma.AddonGroupCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddonGroupCreateArgs, DefaultError, AddonGroup, true>('AddonGroup', 'POST', `${endpoint}/addonGroup/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddonGroupCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddonGroupCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AddonGroup, Prisma.AddonGroupGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddonGroupCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AddonGroup, Prisma.AddonGroupGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAddonGroup(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AddonGroupCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddonGroupCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AddonGroup', 'POST', `${endpoint}/addonGroup/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddonGroupCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddonGroupCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AddonGroupCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAddonGroup<TArgs extends Prisma.AddonGroupFindManyArgs, TQueryFnData = Array<Prisma.AddonGroupGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AddonGroupFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAddonGroup<TArgs extends Prisma.AddonGroupFindManyArgs, TQueryFnData = Array<Prisma.AddonGroupGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AddonGroupFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAddonGroup<TArgs extends Prisma.AddonGroupFindManyArgs, TQueryFnData = Array<Prisma.AddonGroupGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AddonGroupFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAddonGroup<TArgs extends Prisma.AddonGroupFindManyArgs, TQueryFnData = Array<Prisma.AddonGroupGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AddonGroupFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/findMany`, args, options, fetch);
}

export function useFindUniqueAddonGroup<TArgs extends Prisma.AddonGroupFindUniqueArgs, TQueryFnData = Prisma.AddonGroupGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AddonGroupFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAddonGroup<TArgs extends Prisma.AddonGroupFindUniqueArgs, TQueryFnData = Prisma.AddonGroupGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AddonGroupFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/findUnique`, args, options, fetch);
}

export function useFindFirstAddonGroup<TArgs extends Prisma.AddonGroupFindFirstArgs, TQueryFnData = Prisma.AddonGroupGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AddonGroupFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAddonGroup<TArgs extends Prisma.AddonGroupFindFirstArgs, TQueryFnData = Prisma.AddonGroupGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AddonGroupFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/findFirst`, args, options, fetch);
}

export function useUpdateAddonGroup(options?: Omit<(UseMutationOptions<(AddonGroup | undefined), DefaultError, Prisma.AddonGroupUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddonGroupUpdateArgs, DefaultError, AddonGroup, true>('AddonGroup', 'PUT', `${endpoint}/addonGroup/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddonGroupUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddonGroupUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AddonGroup, Prisma.AddonGroupGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddonGroupUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AddonGroup, Prisma.AddonGroupGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAddonGroup(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AddonGroupUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddonGroupUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AddonGroup', 'PUT', `${endpoint}/addonGroup/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddonGroupUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddonGroupUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AddonGroupUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAddonGroup(options?: Omit<(UseMutationOptions<(AddonGroup | undefined), DefaultError, Prisma.AddonGroupUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddonGroupUpsertArgs, DefaultError, AddonGroup, true>('AddonGroup', 'POST', `${endpoint}/addonGroup/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddonGroupUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddonGroupUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AddonGroup, Prisma.AddonGroupGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddonGroupUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AddonGroup, Prisma.AddonGroupGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAddonGroup(options?: Omit<(UseMutationOptions<(AddonGroup | undefined), DefaultError, Prisma.AddonGroupDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddonGroupDeleteArgs, DefaultError, AddonGroup, true>('AddonGroup', 'DELETE', `${endpoint}/addonGroup/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddonGroupDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddonGroupDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AddonGroup, Prisma.AddonGroupGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AddonGroupDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AddonGroup, Prisma.AddonGroupGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAddonGroup(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AddonGroupDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AddonGroupDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AddonGroup', 'DELETE', `${endpoint}/addonGroup/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AddonGroupDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AddonGroupDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AddonGroupDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAddonGroup<TArgs extends Prisma.AddonGroupAggregateArgs, TQueryFnData = Prisma.GetAddonGroupAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AddonGroupAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAddonGroup<TArgs extends Prisma.AddonGroupAggregateArgs, TQueryFnData = Prisma.GetAddonGroupAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AddonGroupAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/aggregate`, args, options, fetch);
}

export function useGroupByAddonGroup<TArgs extends Prisma.AddonGroupGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AddonGroupGroupByArgs['orderBy'] } : { orderBy?: Prisma.AddonGroupGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AddonGroupGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.AddonGroupGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.AddonGroupGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.AddonGroupGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AddonGroupGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAddonGroup<TArgs extends Prisma.AddonGroupGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AddonGroupGroupByArgs['orderBy'] } : { orderBy?: Prisma.AddonGroupGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AddonGroupGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.AddonGroupGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.AddonGroupGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.AddonGroupGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AddonGroupGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/groupBy`, args, options, fetch);
}

export function useCountAddonGroup<TArgs extends Prisma.AddonGroupCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AddonGroupCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AddonGroupCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/count`, args, options, fetch);
}

export function useSuspenseCountAddonGroup<TArgs extends Prisma.AddonGroupCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AddonGroupCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AddonGroupCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AddonGroup', `${endpoint}/addonGroup/count`, args, options, fetch);
}
import type { SelectionType } from '../../../../../../restaurant-manager/generated/prisma';

export function useCheckAddonGroup<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; selectionType?: SelectionType; isRequired?: boolean }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AddonGroup', `${endpoint}/addonGroup/check`, args, options, fetch);
}
