/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, OrderVoucher } from "../../../../../../restaurant-manager/generated/prisma";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateOrderVoucher(options?: Omit<(UseMutationOptions<(OrderVoucher | undefined), DefaultError, Prisma.OrderVoucherCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderVoucherCreateArgs, DefaultError, OrderVoucher, true>('OrderVoucher', 'POST', `${endpoint}/orderVoucher/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderVoucherCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderVoucherCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderVoucher, Prisma.OrderVoucherGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderVoucherCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderVoucher, Prisma.OrderVoucherGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyOrderVoucher(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderVoucherCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderVoucherCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderVoucher', 'POST', `${endpoint}/orderVoucher/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderVoucherCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderVoucherCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderVoucherCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyOrderVoucher<TArgs extends Prisma.OrderVoucherFindManyArgs, TQueryFnData = Array<Prisma.OrderVoucherGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/findMany`, args, options, fetch);
}

export function useInfiniteFindManyOrderVoucher<TArgs extends Prisma.OrderVoucherFindManyArgs, TQueryFnData = Array<Prisma.OrderVoucherGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/findMany`, args, options, fetch);
}

export function useSuspenseFindManyOrderVoucher<TArgs extends Prisma.OrderVoucherFindManyArgs, TQueryFnData = Array<Prisma.OrderVoucherGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyOrderVoucher<TArgs extends Prisma.OrderVoucherFindManyArgs, TQueryFnData = Array<Prisma.OrderVoucherGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/findMany`, args, options, fetch);
}

export function useFindUniqueOrderVoucher<TArgs extends Prisma.OrderVoucherFindUniqueArgs, TQueryFnData = Prisma.OrderVoucherGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueOrderVoucher<TArgs extends Prisma.OrderVoucherFindUniqueArgs, TQueryFnData = Prisma.OrderVoucherGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/findUnique`, args, options, fetch);
}

export function useFindFirstOrderVoucher<TArgs extends Prisma.OrderVoucherFindFirstArgs, TQueryFnData = Prisma.OrderVoucherGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstOrderVoucher<TArgs extends Prisma.OrderVoucherFindFirstArgs, TQueryFnData = Prisma.OrderVoucherGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/findFirst`, args, options, fetch);
}

export function useUpdateOrderVoucher(options?: Omit<(UseMutationOptions<(OrderVoucher | undefined), DefaultError, Prisma.OrderVoucherUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderVoucherUpdateArgs, DefaultError, OrderVoucher, true>('OrderVoucher', 'PUT', `${endpoint}/orderVoucher/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderVoucherUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderVoucherUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderVoucher, Prisma.OrderVoucherGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderVoucherUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderVoucher, Prisma.OrderVoucherGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyOrderVoucher(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderVoucherUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderVoucherUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderVoucher', 'PUT', `${endpoint}/orderVoucher/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderVoucherUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderVoucherUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderVoucherUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertOrderVoucher(options?: Omit<(UseMutationOptions<(OrderVoucher | undefined), DefaultError, Prisma.OrderVoucherUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderVoucherUpsertArgs, DefaultError, OrderVoucher, true>('OrderVoucher', 'POST', `${endpoint}/orderVoucher/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderVoucherUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderVoucherUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderVoucher, Prisma.OrderVoucherGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderVoucherUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderVoucher, Prisma.OrderVoucherGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteOrderVoucher(options?: Omit<(UseMutationOptions<(OrderVoucher | undefined), DefaultError, Prisma.OrderVoucherDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderVoucherDeleteArgs, DefaultError, OrderVoucher, true>('OrderVoucher', 'DELETE', `${endpoint}/orderVoucher/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderVoucherDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderVoucherDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, OrderVoucher, Prisma.OrderVoucherGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.OrderVoucherDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, OrderVoucher, Prisma.OrderVoucherGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyOrderVoucher(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.OrderVoucherDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.OrderVoucherDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('OrderVoucher', 'DELETE', `${endpoint}/orderVoucher/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.OrderVoucherDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.OrderVoucherDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.OrderVoucherDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateOrderVoucher<TArgs extends Prisma.OrderVoucherAggregateArgs, TQueryFnData = Prisma.GetOrderVoucherAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateOrderVoucher<TArgs extends Prisma.OrderVoucherAggregateArgs, TQueryFnData = Prisma.GetOrderVoucherAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/aggregate`, args, options, fetch);
}

export function useGroupByOrderVoucher<TArgs extends Prisma.OrderVoucherGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OrderVoucherGroupByArgs['orderBy'] } : { orderBy?: Prisma.OrderVoucherGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OrderVoucherGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.OrderVoucherGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.OrderVoucherGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.OrderVoucherGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrderVoucherGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByOrderVoucher<TArgs extends Prisma.OrderVoucherGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.OrderVoucherGroupByArgs['orderBy'] } : { orderBy?: Prisma.OrderVoucherGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.OrderVoucherGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.OrderVoucherGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.OrderVoucherGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.OrderVoucherGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.OrderVoucherGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/groupBy`, args, options, fetch);
}

export function useCountOrderVoucher<TArgs extends Prisma.OrderVoucherCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OrderVoucherCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/count`, args, options, fetch);
}

export function useSuspenseCountOrderVoucher<TArgs extends Prisma.OrderVoucherCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.OrderVoucherCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.OrderVoucherCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('OrderVoucher', `${endpoint}/orderVoucher/count`, args, options, fetch);
}

export function useCheckOrderVoucher<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; orderId?: string; voucherId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('OrderVoucher', `${endpoint}/orderVoucher/check`, args, options, fetch);
}
