/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Restaurant } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateRestaurant(options?: Omit<(UseMutationOptions<(Restaurant | undefined), DefaultError, Prisma.RestaurantCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantCreateArgs, DefaultError, Restaurant, true>('Restaurant', 'POST', `${endpoint}/restaurant/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Restaurant, Prisma.RestaurantGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Restaurant, Prisma.RestaurantGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyRestaurant(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RestaurantCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('Restaurant', 'POST', `${endpoint}/restaurant/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyRestaurant<TArgs extends Prisma.RestaurantFindManyArgs, TQueryFnData = Array<Prisma.RestaurantGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/findMany`, args, options, fetch);
}

export function useInfiniteFindManyRestaurant<TArgs extends Prisma.RestaurantFindManyArgs, TQueryFnData = Array<Prisma.RestaurantGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/findMany`, args, options, fetch);
}

export function useSuspenseFindManyRestaurant<TArgs extends Prisma.RestaurantFindManyArgs, TQueryFnData = Array<Prisma.RestaurantGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyRestaurant<TArgs extends Prisma.RestaurantFindManyArgs, TQueryFnData = Array<Prisma.RestaurantGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/findMany`, args, options, fetch);
}

export function useFindUniqueRestaurant<TArgs extends Prisma.RestaurantFindUniqueArgs, TQueryFnData = Prisma.RestaurantGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RestaurantFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueRestaurant<TArgs extends Prisma.RestaurantFindUniqueArgs, TQueryFnData = Prisma.RestaurantGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RestaurantFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/findUnique`, args, options, fetch);
}

export function useFindFirstRestaurant<TArgs extends Prisma.RestaurantFindFirstArgs, TQueryFnData = Prisma.RestaurantGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstRestaurant<TArgs extends Prisma.RestaurantFindFirstArgs, TQueryFnData = Prisma.RestaurantGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/findFirst`, args, options, fetch);
}

export function useUpdateRestaurant(options?: Omit<(UseMutationOptions<(Restaurant | undefined), DefaultError, Prisma.RestaurantUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantUpdateArgs, DefaultError, Restaurant, true>('Restaurant', 'PUT', `${endpoint}/restaurant/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Restaurant, Prisma.RestaurantGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Restaurant, Prisma.RestaurantGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyRestaurant(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RestaurantUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('Restaurant', 'PUT', `${endpoint}/restaurant/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertRestaurant(options?: Omit<(UseMutationOptions<(Restaurant | undefined), DefaultError, Prisma.RestaurantUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantUpsertArgs, DefaultError, Restaurant, true>('Restaurant', 'POST', `${endpoint}/restaurant/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Restaurant, Prisma.RestaurantGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Restaurant, Prisma.RestaurantGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteRestaurant(options?: Omit<(UseMutationOptions<(Restaurant | undefined), DefaultError, Prisma.RestaurantDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantDeleteArgs, DefaultError, Restaurant, true>('Restaurant', 'DELETE', `${endpoint}/restaurant/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, Restaurant, Prisma.RestaurantGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, Restaurant, Prisma.RestaurantGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyRestaurant(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RestaurantDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('Restaurant', 'DELETE', `${endpoint}/restaurant/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateRestaurant<TArgs extends Prisma.RestaurantAggregateArgs, TQueryFnData = Prisma.GetRestaurantAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RestaurantAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateRestaurant<TArgs extends Prisma.RestaurantAggregateArgs, TQueryFnData = Prisma.GetRestaurantAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RestaurantAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/aggregate`, args, options, fetch);
}

export function useGroupByRestaurant<TArgs extends Prisma.RestaurantGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RestaurantGroupByArgs['orderBy'] } : { orderBy?: Prisma.RestaurantGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RestaurantGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.RestaurantGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.RestaurantGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.RestaurantGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RestaurantGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByRestaurant<TArgs extends Prisma.RestaurantGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RestaurantGroupByArgs['orderBy'] } : { orderBy?: Prisma.RestaurantGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RestaurantGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.RestaurantGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.RestaurantGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.RestaurantGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RestaurantGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/groupBy`, args, options, fetch);
}

export function useCountRestaurant<TArgs extends Prisma.RestaurantCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RestaurantCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/count`, args, options, fetch);
}

export function useSuspenseCountRestaurant<TArgs extends Prisma.RestaurantCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RestaurantCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('Restaurant', `${endpoint}/restaurant/count`, args, options, fetch);
}

export function useCheckRestaurant<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; website?: string; description?: string; logo?: string; timezone?: string; currency?: string; isActive?: boolean; settings?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('Restaurant', `${endpoint}/restaurant/check`, args, options, fetch);
}
