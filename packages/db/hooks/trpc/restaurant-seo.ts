/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, RestaurantSEO } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateRestaurantSEO(options?: Omit<(UseMutationOptions<(RestaurantSEO | undefined), DefaultError, Prisma.RestaurantSEOCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantSEOCreateArgs, DefaultError, RestaurantSEO, true>('RestaurantSEO', 'POST', `${endpoint}/restaurantSEO/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantSEOCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantSEOCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RestaurantSEO, Prisma.RestaurantSEOGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantSEOCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RestaurantSEO, Prisma.RestaurantSEOGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyRestaurantSEO(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RestaurantSEOCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantSEOCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('RestaurantSEO', 'POST', `${endpoint}/restaurantSEO/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantSEOCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantSEOCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantSEOCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyRestaurantSEO<TArgs extends Prisma.RestaurantSEOFindManyArgs, TQueryFnData = Array<Prisma.RestaurantSEOGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/findMany`, args, options, fetch);
}

export function useInfiniteFindManyRestaurantSEO<TArgs extends Prisma.RestaurantSEOFindManyArgs, TQueryFnData = Array<Prisma.RestaurantSEOGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/findMany`, args, options, fetch);
}

export function useSuspenseFindManyRestaurantSEO<TArgs extends Prisma.RestaurantSEOFindManyArgs, TQueryFnData = Array<Prisma.RestaurantSEOGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyRestaurantSEO<TArgs extends Prisma.RestaurantSEOFindManyArgs, TQueryFnData = Array<Prisma.RestaurantSEOGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/findMany`, args, options, fetch);
}

export function useFindUniqueRestaurantSEO<TArgs extends Prisma.RestaurantSEOFindUniqueArgs, TQueryFnData = Prisma.RestaurantSEOGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueRestaurantSEO<TArgs extends Prisma.RestaurantSEOFindUniqueArgs, TQueryFnData = Prisma.RestaurantSEOGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/findUnique`, args, options, fetch);
}

export function useFindFirstRestaurantSEO<TArgs extends Prisma.RestaurantSEOFindFirstArgs, TQueryFnData = Prisma.RestaurantSEOGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstRestaurantSEO<TArgs extends Prisma.RestaurantSEOFindFirstArgs, TQueryFnData = Prisma.RestaurantSEOGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/findFirst`, args, options, fetch);
}

export function useUpdateRestaurantSEO(options?: Omit<(UseMutationOptions<(RestaurantSEO | undefined), DefaultError, Prisma.RestaurantSEOUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantSEOUpdateArgs, DefaultError, RestaurantSEO, true>('RestaurantSEO', 'PUT', `${endpoint}/restaurantSEO/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantSEOUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantSEOUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RestaurantSEO, Prisma.RestaurantSEOGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantSEOUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RestaurantSEO, Prisma.RestaurantSEOGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyRestaurantSEO(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RestaurantSEOUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantSEOUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('RestaurantSEO', 'PUT', `${endpoint}/restaurantSEO/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantSEOUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantSEOUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantSEOUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertRestaurantSEO(options?: Omit<(UseMutationOptions<(RestaurantSEO | undefined), DefaultError, Prisma.RestaurantSEOUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantSEOUpsertArgs, DefaultError, RestaurantSEO, true>('RestaurantSEO', 'POST', `${endpoint}/restaurantSEO/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantSEOUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantSEOUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RestaurantSEO, Prisma.RestaurantSEOGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantSEOUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RestaurantSEO, Prisma.RestaurantSEOGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteRestaurantSEO(options?: Omit<(UseMutationOptions<(RestaurantSEO | undefined), DefaultError, Prisma.RestaurantSEODeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantSEODeleteArgs, DefaultError, RestaurantSEO, true>('RestaurantSEO', 'DELETE', `${endpoint}/restaurantSEO/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantSEODeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantSEODeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RestaurantSEO, Prisma.RestaurantSEOGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantSEODeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RestaurantSEO, Prisma.RestaurantSEOGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyRestaurantSEO(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RestaurantSEODeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RestaurantSEODeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('RestaurantSEO', 'DELETE', `${endpoint}/restaurantSEO/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RestaurantSEODeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RestaurantSEODeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RestaurantSEODeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateRestaurantSEO<TArgs extends Prisma.RestaurantSEOAggregateArgs, TQueryFnData = Prisma.GetRestaurantSEOAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateRestaurantSEO<TArgs extends Prisma.RestaurantSEOAggregateArgs, TQueryFnData = Prisma.GetRestaurantSEOAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/aggregate`, args, options, fetch);
}

export function useGroupByRestaurantSEO<TArgs extends Prisma.RestaurantSEOGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RestaurantSEOGroupByArgs['orderBy'] } : { orderBy?: Prisma.RestaurantSEOGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RestaurantSEOGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.RestaurantSEOGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.RestaurantSEOGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.RestaurantSEOGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RestaurantSEOGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByRestaurantSEO<TArgs extends Prisma.RestaurantSEOGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RestaurantSEOGroupByArgs['orderBy'] } : { orderBy?: Prisma.RestaurantSEOGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RestaurantSEOGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.RestaurantSEOGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.RestaurantSEOGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.RestaurantSEOGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RestaurantSEOGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/groupBy`, args, options, fetch);
}

export function useCountRestaurantSEO<TArgs extends Prisma.RestaurantSEOCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RestaurantSEOCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/count`, args, options, fetch);
}

export function useSuspenseCountRestaurantSEO<TArgs extends Prisma.RestaurantSEOCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RestaurantSEOCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RestaurantSEOCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/count`, args, options, fetch);
}

export function useCheckRestaurantSEO<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; restaurantId?: string; metaTitle?: string; metaDescription?: string; metaKeywords?: string; gTag?: string; fbPixel?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('RestaurantSEO', `${endpoint}/restaurantSEO/check`, args, options, fetch);
}
